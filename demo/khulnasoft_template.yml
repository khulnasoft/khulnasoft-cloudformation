AWSTemplateFormatVersion: 2010-09-09
Description: Provides a demo environment with a Khulnasoft cluster of two nodes, Elasticsearch cluster of three nodes with xpack security and SSL enabled, a Splunk instance and several agents.
Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-0c6b1d09930fac512
      HVMCENTOS7: ami-02eac2c0129f6376b
      HVMUBUNTU64: ami-024a64a6685d05041
      HVMREDHAT7: ami-6871a115
      HVMDEBIAN: ami-0357081a1383dc76b
      HVMWINDOWS: ami-0a9ca0496f746e6e0

    us-east-2:
      HVM64: ami-0ebbf2179e615c338
      HVMCENTOS7: ami-0f2b4fc905b0bd1f1
      HVMUBUNTU64: ami-097ebb39620d8d54b
      HVMREDHAT7: ami-03291866
      HVMDEBIAN: ami-09c10a66337c79669
      HVMWINDOWS: ami-0087a83ed4a60d1e9

    us-west-1:
      HVM64: ami-015954d5e5548d13b
      HVMUBUNTU64: ami-040dfc3ebf1bfc4f6
      HVMCENTOS7: ami-074e2d6769f445be5
      HVMREDHAT7: ami-18726478
      HVMDEBIAN: ami-0adbaf2e0ce044437
      HVMWINDOWS: ami-05bf35c67c02cd868
    us-west-2:
      HVM64: ami-0cb72367e98845d43
      HVMUBUNTU64: ami-0196ce5c34425a906
      HVMCENTOS7: ami-01ed306a12b7d1c96
      HVMREDHAT7: ami-28e07e50
      HVMDEBIAN: ami-05a3ef6744aa96514
      HVMWINDOWS: ami-04ad37d2932b886c0
    ca-central-1:
      HVM64: ami-08a9b721ecc5b0a53
      HVMUBUNTU64: ami-0380eb76ff3ad603f
      HVMCENTOS7: ami-033e6106180a626d0
      HVMREDHAT7: ami-49f0762d
      HVMDEBIAN: ami-04413a263a7d94982
      HVMWINDOWS: ami-020e569ea1f3a4e1c
    eu-west-1:
      HVM64: ami-030dbca661d402413
      HVMUBUNTU64: ami-0b2a4d260c54e8d3d
      HVMCENTOS7: ami-0ff760d16d9497662
      HVMREDHAT7: ami-7c491f05
      HVMDEBIAN: ami-0968f6a31fc6cffc0
      HVMWINDOWS: ami-03838ccd5cfb84782
    eu-west-2:
      HVM64: ami-0009a33f033d8b7b6
      HVMUBUNTU64: ami-09dd110e91f421069
      HVMCENTOS7: ami-0eab3a90fc693af19
      HVMREDHAT7: ami-7c1bfd1b
      HVMDEBIAN: ami-0faa9c9b5399088fd
      HVMWINDOWS: ami-0ebf422d2a92724ec
    eu-west-3:
      HVM64: ami-0ebb3a801d5fb8b9b
      HVMUBUNTU64: ami-00e557eb4a269bf1c
      HVMCENTOS7: ami-0e1ab783dc9489f34
      HVMREDHAT7: ami-5026902d
      HVMDEBIAN: ami-0cd23820af84edc85
      HVMWINDOWS: ami-022cfeccb4b72d6b8
    ap-northeast-1:
      HVM64: ami-00d101850e971728d
      HVMUBUNTU64: ami-0b5a5c971fc30e5d1
      HVMCENTOS7: ami-045f38c93733dd48d
      HVMREDHAT7: ami-6b0d5f0d
      HVMDEBIAN: ami-09fbcd30452841cb9
      HVMWINDOWS: ami-02192102f14f0a10a
    ap-northeast-2:
      HVM64: ami-08ab3f7e72215fe91
      HVMUBUNTU64: ami-06af4ace0697354bf
      HVMCENTOS7: ami-06cf2a72dadf92410
      HVMREDHAT7: ami-3eee4150
      HVMDEBIAN: ami-08363ccce96df1fff
      HVMWINDOWS: ami-0708a3b845edea89c
    ap-southeast-1:
      HVM64: ami-0b5a47f8865280111
      HVMUBUNTU64: ami-0355471dc9f264631
      HVMCENTOS7: ami-0b4dd9d65556cac22
      HVMREDHAT7: ami-76144b0a
      HVMDEBIAN: ami-0555b1a5444087dd4
      HVMWINDOWS: ami-0afce41e503676765
    ap-southeast-2:
      HVM64: ami-0fb7513bcdc525c3b
      HVMUBUNTU64: ami-0065540df76a93885
      HVMCENTOS7: ami-08bd00d7713a39e7d
      HVMREDHAT7: ami-67589505
      HVMDEBIAN: ami-029c54f988446691a
      HVMWINDOWS: ami-0628ef1f10e34307d
    ap-south-1:
      HVM64: ami-00e782930f1c3dbc7
      HVMUBUNTU64: ami-076b389b9989430c2
      HVMCENTOS7: ami-02e60be79e78fef21
      HVMREDHAT7: ami-5b673c34
      HVMDEBIAN: ami-0dc98cbb0d0e49162
      HVMWINDOWS: ami-0e719217acb64308e
    sa-east-1:
      HVM64: ami-058141e091292ecf0
      HVMUBUNTU64: ami-009e4c831385f8901
      HVMCENTOS7: ami-0b8d86d4bf91850af
      HVMREDHAT7: ami-b0b7e3dc
      HVMDEBIAN: ami-030580e61468e54bd
      HVMWINDOWS: ami-07df12f3c5005cd1f
  SubnetConfig:
    KhulnasoftVpc:
      CIDR: 10.0.0.0/16
    SubnetKhulnasoft:
      CIDR: 10.0.0.0/24
    SubnetAgents:
      CIDR: 10.0.1.0/24
    SubnetElasticsearch:
      CIDR: 10.0.2.0/24

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Environment type"
        Parameters:
          - EnvironmentType
      -
        Label:
          default: "AWS environment"
        Parameters:
          - AvailabilityZone
          - KeyPairName
      -
        Label:
          default: "Version and instance types"
        Parameters:
          - ElasticKhulnasoftVersion
          - KhulnasoftInstanceType
          - ElasticInstanceType
          - KibanaInstanceType
          - SplunkInstanceType
          - SshUsername
          - SshPassword
          - SplunkVersion
      -
        Label:
          default: "Khulnasoft Amazon Linux agent instance type"
        Parameters:
          - AgentInstanceType
          - CentosAgentInstanceType
          - WindowsInstanceType
          - RedHatInstanceType
          - DebianInstanceType
          - UbuntuInstanceType

      -
        Label:
          default: "Khulnasoft configuration"
        Parameters:
          - KhulnasoftServerPort
          - KhulnasoftRegistrationPort
          - KhulnasoftRegistrationPassword
          - KhulnasoftApiPort
          - KhulnasoftApiAdminUsername
          - KhulnasoftApiAdminPassword
          - KhulnasoftClusterKey
          - Branch
          - ApiBranch
      -
        Label:
          default: "Kibana configuration"
        Parameters:
          - KibanaPort
      -
        Label:
          default: "Splunk configuration"
        Parameters:
          - SplunkUsername
          - SplunkPassword
      -
        Label:
          default: "Integration keys"
        Parameters:
          - AwsSecretKey
          - AwsAccessKey
          - VirusTotalKey
          - SlackHook
      -
        Label:
          default: "SSL Certificate"
        Parameters:
          - SSLCertificateARN

Parameters:

  # AWS environment
  AvailabilityZone:
    Description: Select an availability zone for the VPC
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  KeyPairName:
    Description: Existing EC2 key pair for SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
  SshUsername:
    Default: khulnasoft
    Description: SSH username
    Type: String
    MinLength: '5'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 5. Maximum length 32.
  SshPassword:
    Description: SSH Password
    NoEcho: 'True'
    Type: String
    MinLength: '8'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters. Minimum length 8. Maximum length 64.
  SplunkVersion:
    Description: Splunk version
    NoEcho: 'True'
    Type: String
    MinLength: '8'
    MaxLength: '64'
    ConstraintDescription: Only alphanumeric characters. Minimum length 8. Maximum length 64.
  # Version and instance types
  ElasticKhulnasoftVersion:
    AllowedValues:
      - 6.5.0_3.7.0
      - 6.5.1_3.7.1
      - 6.5.2_3.7.1
      - 6.5.3_3.7.2
      - 6.5.4_3.7.2
      - 6.6.2_3.9.0
      - 6.7.0_3.9.0
      - 6.7.1_3.9.0
      - 6.8.0_3.9.1
      - 7.1.0_3.9.1
      - 7.1.1_3.9.2
      - 7.2.0_3.9.3
      - 7.2.0_3.9.4
      - 7.3.0_3.9.4
      - 7.3.0_3.9.5
      - 7.3.2_3.10.0
      - 7.3.2_3.10.2
      - 7.3.2_3.11.0
      - 7.4.2_3.11.0
      - 7.5.0_3.11.0
      - 7.5.1_3.11.0
      - 7.5.1_3.11.1
      - 7.5.1_3.11.2
      - 7.5.2_3.11.3
      - 7.6.1_3.11.4
      - 7.6.1_3.12.0
      - 7.6.2_3.12.2
      - 7.6.2_3.12.3
      - 7.7.1_3.13.0
      - 7.8.0_3.13.1
      - 7.9.1_3.13.2
      - 7.9.2_3.13.2
    ConstraintDescription: Format is ElasticVersion_KhulnasoftVersion
    Default: 7.9.2_4.0.0
    Description: Elastic and Khulnasoft versions to be installed
    Type: String

  Winagentversion:
    Default: 4.0.0
    Description: Khulnasoft Windows agent version to be installed
    Type: String

  KhulnasoftInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge

    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Khulnasoft instance
    Type: String
  EnvironmentType:
    AllowedValues:
      - production
      - staging
      - devel
      - sources
    ConstraintDescription: Must contain valid instance type
    Default: staging
    Description: Select a stage
    Type: String
  AgentInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
    ConstraintDescription: Must contain valid instance type
    Default: t2.micro
    Description: Type of EC2 instance for Khulnasoft Amazon Linux agent instance
    Type: String

  CentosAgentInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
    ConstraintDescription: Must contain valid instance type
    Default: t2.micro
    Description: Type of EC2 instance for Khulnasoft CentOS agent instance
    Type: String


  RedHatInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
    ConstraintDescription: Must contain valid instance type
    Default: t2.micro
    Description: Type of EC2 instance for Khulnasoft RedHat agent instance
    Type: String

  WindowsInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Windows Khulnasoft agent instance
    Type: String

  DebianInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
    ConstraintDescription: Must contain valid instance type
    Default: t2.micro
    Description: Type of EC2 instance for Debian Khulnasoft agent instance
    Type: String

  UbuntuInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
    ConstraintDescription: Must contain valid instance type
    Default: t2.micro
    Description: Type of EC2 instance for Ubuntu Khulnasoft agent instance
    Type: String

  ElasticInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - m5d.large
      - i3.large
      - i3.xlarge
      - i3.2xlarge

    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Elastic instance
    Type: String
  KibanaInstanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - m5.large
      - m5d.large
      - m5.xlarge
      - m5.2xlarge
      - r5.large

    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Kibana instance
    Type: String

  SplunkInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - m5.large
      - r5.large
    ConstraintDescription: Must contain valid instance type
    Default: t2.medium
    Description: Type of EC2 instance for Splunk instance
    Type: String

  # Khulnasoft configuration
  KhulnasoftServerPort:
    Default: '1514'
    Description: Port for agents connection with Khulnasoft server
    Type: String
  KhulnasoftRegistrationPort:
    Default: '1515'
    Description: Port for agents registration with Khulnasoft server
    Type: String
  KhulnasoftRegistrationPassword:
    Description: Password for Khulnasoft agents registration
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  KhulnasoftApiPort:
    Default: '55000'
    Description: Port for Khulnasoft server API
    Type: String
  KhulnasoftApiAdminUsername:
    Default: admin
    Description: Admin username for Khulnasoft API
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  KhulnasoftApiAdminPassword:
    Description: Admin password for Khulnasoft API
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  KhulnasoftClusterKey:
    Description: Key used for Khulnasoft servers cluster
    Default: 'abcdefghijklmnopqrstuvwxyz012345'
    Type: String
    MinLength: '32'
    MaxLength: '32'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Any alphanumeric string of 32 characters
  Branch:
    Description: Branch to fetch in order to compile.
    Default: '3.13'
    Type: String
    MinLength: '1'
    MaxLength: '10'
    ConstraintDescription: Any valid Khulnasoft branch
  ApiBranch:
    Description: Khulnasoft API Branch to fetch in order to compile.
    Default: '3.13'
    Type: String
    MinLength: '1'
    MaxLength: '10'
    ConstraintDescription: Any valid Khulnasoft API branch
  # Kibana configuration
  KibanaPort:
    Default: '443'
    Description: Port for Kibana WUI
    Type: String
  SplunkUsername:
    Default: khulnasoft
    Description: Username for Splunk access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  SplunkPassword:
    Description: Password for Splunk access
    NoEcho: 'True'
    Type: String
    MinLength: '1'
    MaxLength: '48'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters
  AwsSecretKey:
    Description: (Optional) Secret key for AWS integration
    Type: String

  AwsAccessKey:
    Description: (Optional) Access key for AWS integration
    Type: String

  VirusTotalKey:
    Description: (Optional) Key for VirusTotal integration
    Type: String

  SlackHook:
    Description: (Optional) Webhook for Slack integration
    Type: String

  SSLCertificateARN:
    Description: 'Used for HTTPS access to WUI. Existent certificate, identified by its Amazon Resource Name (ARN).'
    Type: String

Conditions:
  HasSslCert: !Not [!Equals [!Ref SSLCertificateARN, ""]]

Resources:

  # Network resources
  KhulnasoftVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - KhulnasoftVpc
        - CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
  SubnetKhulnasoft:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref KhulnasoftVpc
      AvailabilityZone: !Select [ "0", !Ref AvailabilityZone ]
      CidrBlock: !FindInMap
        - SubnetConfig
        - SubnetKhulnasoft
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetKhulnasoft'
  SubnetAgents:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref KhulnasoftVpc
      AvailabilityZone: !Select [ "0", !Ref AvailabilityZone ]
      CidrBlock: !FindInMap
        - SubnetConfig
        - SubnetAgents
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetAgents'
  SubnetElasticsearch:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref KhulnasoftVpc
        AvailabilityZone: !Select [ "0", !Ref AvailabilityZone ]
        CidrBlock: !FindInMap
          - SubnetConfig
          - SubnetElasticsearch
          - CIDR
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: !Sub '${AWS::StackName}-SubnetElasticsearch'

  # Internet access and routing
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref KhulnasoftVpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref KhulnasoftVpc
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetKhulnasoftPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetKhulnasoft
      RouteTableId: !Ref PublicRouteTable
  SubnetElasticPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      RouteTableId: !Ref PublicRouteTable
  SubnetAgentsPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAgents
      RouteTableId: !Ref PublicRouteTable

  # Security groups
  ElasticSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticsearch security group
      VpcId: !Ref KhulnasoftVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9400
          CidrIp: !FindInMap
            - SubnetConfig
            - KhulnasoftVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElasticSecurityGroup'
  KibanaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Kibana security group
      VpcId: !Ref KhulnasoftVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref KibanaPort
          ToPort: !Ref KibanaPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9400
          CidrIp: !FindInMap
            - SubnetConfig
            - KhulnasoftVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-KibanaSecurityGroup'
  KhulnasoftSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Khulnasoft security group
      VpcId: !Ref KhulnasoftVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref KhulnasoftServerPort
          ToPort: !Ref KhulnasoftServerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref KhulnasoftRegistrationPort
          ToPort: !Ref KhulnasoftRegistrationPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1516
          ToPort: 1516
          CidrIp: !FindInMap
            - SubnetConfig
            - KhulnasoftVpc
            - CIDR
        - IpProtocol: tcp
          FromPort: !Ref KhulnasoftApiPort
          ToPort: !Ref KhulnasoftApiPort
          CidrIp: !FindInMap
            - SubnetConfig
            - KhulnasoftVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-KhulnasoftSecurityGroup'
  SplunkSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Splunk security group
      VpcId: !Ref KhulnasoftVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9997
          ToPort: 9997
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SplunkSecurityGroup'

  # Elasticsearch load balancer
  ElbElasticSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Elasticsearch security group
      VpcId: !Ref KhulnasoftVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !FindInMap
            - SubnetConfig
            - KhulnasoftVpc
            - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ElbElasticSecurityGroup'

  # Khulnasoft registration Listener for Network Load Balancer
  ElasticBootstrap:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                MasterIp: ${KhulnasoftMasterInstance.PrivateIp}
                WorkerIp: ${KhulnasoftWorkerInstance.PrivateIp}
                KibanaIp: ${KibanaInstance.PrivateIp}
                NodeName: 3
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_cf_bootstrap_elastic.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/elastic/khulnasoft_cf_bootstrap_elastic.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_cf_bootstrap_elastic.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "ElasticSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
          PrivateIpAddress: "10.0.2.124"
      Tags:
        - Key: Name
          Value: ElasticBootstrap
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticBootstrap --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticBootstrap --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ElasticBootstrapEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'ElasticSecurityGroup']
  ElasticBootstrapEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'ElasticBootstrapEIP-${AWS::StackName}'
  ElasticBootstrapEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref ElasticBootstrapEth0
      AllocationId: !GetAtt
        - ElasticBootstrapEIP
        - AllocationId

  ElasticMasterB:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                NodeName: 1
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_cf_elastic.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/elastic/khulnasoft_cf_elastic.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_cf_elastic.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "ElasticSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
          PrivateIpAddress: "10.0.2.123"
      Tags:
        - Key: Name
          Value: ElasticMasterB
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticMasterB --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticMasterB --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ElasticMasterBEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'ElasticSecurityGroup']
  ElasticMasterBEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'ElasticMasterBEIP-${AWS::StackName}'
  ElasticMasterBEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref ElasticMasterBEth0
      AllocationId: !GetAtt
        - ElasticMasterBEIP
        - AllocationId

  ElasticMasterC:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          ElasticInstallationSet:
            - Elasticfiles
            - ElasticInstall
        Elasticfiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                NodeName: 2
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_cf_elastic.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/elastic/khulnasoft_cf_elastic.sh
              mode: '000700'
              owner: root
              group: root
        ElasticInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_cf_elastic.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref ElasticInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "ElasticSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
          PrivateIpAddress: "10.0.2.125"
      Tags:
        - Key: Name
          Value: ElasticMasterC
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ElasticMasterC --configsets ElasticInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ElasticMasterC --region ${AWS::Region}
    DependsOn: GatewayToInternet
  ElasticMasterCEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'ElasticSecurityGroup']
  ElasticMasterCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'ElasticMasterCEIP-${AWS::StackName}'
  ElasticMasterCEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref ElasticMasterCEth0
      AllocationId: !GetAtt
        - ElasticMasterCEIP
        - AllocationId

  # Khulnasoft Network Load Balancer
  KhulnasoftNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-Khulnasoft'
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetKhulnasoft
      Type: network
      Tags:
        - Key: Name
          Value: nlbkhulnasoft

  # Khulnasoft registration Target Group for Network Load Balancer
  RegistrationTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-registrationTG'
      Port: !Ref KhulnasoftRegistrationPort
      Protocol: TCP
      VpcId: !Ref KhulnasoftVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref KhulnasoftMasterInstance
        Port: !Ref KhulnasoftRegistrationPort
      Tags:
        - Key: Name
          Value: registrationTG

  # TLS Target Group for Network Load Balancer
  TLSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: HasSslCert
    Properties:
      Name: !Sub '${AWS::StackName}-TLSTargetGroup'
      Port: !Ref KibanaPort
      Protocol: TCP
      VpcId: !Ref KhulnasoftVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref KibanaInstance
        Port: !Ref KibanaPort
      Tags:
        - Key: Name
          Value: TLSTargetGroup

  # Khulnasoft registration Listener for Network Load Balancer
  RegistrationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref RegistrationTG
      LoadBalancerArn: !Ref KhulnasoftNetworkLoadBalancer
      Port: !Ref KhulnasoftRegistrationPort
      Protocol: TCP

  # Reporting Target Group for Khulnasoft master and worker nodes
  ReportingTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-reportingTG'
      Port: !Ref KhulnasoftServerPort
      Protocol: TCP
      VpcId: !Ref KhulnasoftVpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
      Targets:
      - Id: !Ref KhulnasoftMasterInstance
        Port: !Ref KhulnasoftServerPort
      - Id: !Ref KhulnasoftWorkerInstance
        Port: !Ref KhulnasoftServerPort
      Tags:
        - Key: Name
          Value: reportingTG

  # Reporting Listener for Network LB.
  ReportingListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ReportingTG
      LoadBalancerArn: !Ref KhulnasoftNetworkLoadBalancer
      Port: '1514'
      Protocol: TCP

  # Listener for Kibana WUI
  TLSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSslCert
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TLSTargetGroup
      LoadBalancerArn: !Ref KhulnasoftNetworkLoadBalancer
      Port: !Ref KibanaPort
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
      - CertificateArn: !Ref SSLCertificateARN

  # IAM role and profile
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-GetCloudformation'
          PolicyDocument:
            Statement:
              - Action:
                  - 'cloudformation:DescribeStack*'
                  - 'cloudformation:DescribeStackResource*'
                  - 'cloudformation:List*'
                Resource: '*'
                Effect: Allow
        - PolicyName: !Sub '${AWS::StackName}-DescribeInstances'
          PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
                Effect: Allow
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref InstanceRole

  # Kibana instance
  KibanaInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          KibanaInstallationSet:
            - KibanaFiles
            - KibanaInstall
        KibanaFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KibanaPort: ${KibanaPort}
                KhulnasoftApiAdminUsername: ${KhulnasoftApiAdminUsername}
                KhulnasoftApiAdminPassword: ${KhulnasoftApiAdminPassword}
                KhulnasoftApiPort: ${KhulnasoftApiPort}
                KhulnasoftMasterIP: ${KhulnasoftMasterInstance.PrivateIp}
                EnvironmentType: ${EnvironmentType}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_cf_kibana.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/elastic/khulnasoft_cf_kibana.sh
              mode: '000700'
              owner: root
              group: root
        KibanaInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_cf_kibana.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref KibanaInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "KibanaSecurityGroup"
          SubnetId:
            Ref: "SubnetElasticsearch"
      Tags:
        - Key: Name
          Value: KhulnasoftKibana
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource KibanaInstance --configsets KibanaInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KibanaInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  KibanaEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'KibanaSecurityGroup']
  KibanaEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'KibanaEIP-${AWS::StackName}'
  KibanaEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref KibanaEth0
      AllocationId: !GetAtt
        - KibanaEIP
        - AllocationId

  SplunkInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SplunkInstallationSet:
            - SplunkFiles
            - SplunkInstall
        SplunkFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                KhulnasoftVersion: ${ElasticKhulnasoftVersion}
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                SplunkUsername: ${SplunkUsername}
                SplunkPassword: ${SplunkPassword}
                KhulnasoftApiAdminUsername: ${KhulnasoftApiAdminUsername}
                KhulnasoftApiAdminPassword: ${KhulnasoftApiAdminPassword}
                KhulnasoftApiPort: ${KhulnasoftApiPort}
                EnvironmentType: ${EnvironmentType}
                SplunkVersion: ${EnvironmentType}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_cf_splunk.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/splunk/khulnasoft_cf_splunk.sh
              mode: '000700'
              owner: root
              group: root
        SplunkInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_cf_splunk.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref SplunkInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "SplunkSecurityGroup"
          SubnetId:
            Ref: "SubnetKhulnasoft"
      Tags:
        - Key: Name
          Value: Splunk
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource SplunkInstance --configsets SplunkInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Splunk --region ${AWS::Region}
    DependsOn: GatewayToInternet
  SplunkEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetElasticsearch
      GroupSet: [!Ref 'SplunkSecurityGroup']
  SplunkEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'SplunkEIP-${AWS::StackName}'
  SplunkEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref SplunkEth0
      AllocationId: !GetAtt
        - SplunkEIP
        - AllocationId

  # Khulnasoft master instance
  KhulnasoftMasterInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          KhulnasoftInstallationSet:
            - KhulnasoftFiles
            - KhulnasoftInstall
        KhulnasoftFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KhulnasoftApiAdminUsername: ${KhulnasoftApiAdminUsername}
                KhulnasoftApiAdminPassword: ${KhulnasoftApiAdminPassword}
                KhulnasoftApiPort: ${KhulnasoftApiPort}
                KhulnasoftServerPort: ${KhulnasoftServerPort}
                SplunkUsername: ${SplunkUsername}
                SplunkPassword: ${SplunkPassword}
                KhulnasoftRegistrationPort: ${KhulnasoftRegistrationPort}
                KhulnasoftRegistrationPassword: ${KhulnasoftRegistrationPassword}
                KhulnasoftClusterKey: ${KhulnasoftClusterKey}
                WindowsPublicIp: ${Windows.PublicIp}
                AwsSecretKey: ${AwsSecretKey}
                AwsAccessKey: ${AwsAccessKey}
                VirusTotalKey: ${VirusTotalKey}
                SlackHook: ${SlackHook}
                EnvironmentType: ${EnvironmentType}
                SplunkIp: ${SplunkInstance.PrivateIp}
                Branch: ${Branch}
                ApiBranch: ${ApiBranch}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_cf_master.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/khulnasoft/cluster/khulnasoft_cf_master.sh
              mode: '000700'
              owner: root
              group: root
        KhulnasoftInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_cf_master.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref KhulnasoftInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "KhulnasoftSecurityGroup"
          SubnetId:
            Ref: "SubnetKhulnasoft"
      Tags:
        - Key: Name
          Value: KhulnasoftMaster
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource KhulnasoftMasterInstance --configsets KhulnasoftInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KhulnasoftMasterInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  KhulnasoftMasterEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetKhulnasoft
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  KhulnasoftMasterEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'MasterEIP-${AWS::StackName}'
  KhulnasoftMasterEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref KhulnasoftMasterEth0
      AllocationId: !GetAtt
        - KhulnasoftMasterEIP
        - AllocationId

  # Khulnasoft worker instance
  KhulnasoftWorkerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          KhulnasoftInstallationSet:
            - KhulnasoftFiles
            - KhulnasoftInstall
        KhulnasoftFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                SplunkUsername: ${SplunkUsername}
                SplunkPassword: ${SplunkPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KhulnasoftServerPort: ${KhulnasoftServerPort}
                KhulnasoftClusterKey: ${KhulnasoftClusterKey}
                KhulnasoftMasterIP: ${KhulnasoftMasterInstance.PrivateIp}
                AwsSecretKey: ${AwsSecretKey}
                AwsAccessKey: ${AwsAccessKey}
                VirusTotalKey: ${VirusTotalKey}
                SlackHook: ${SlackHook}
                EnvironmentType: ${EnvironmentType}
                SplunkIp: ${SplunkInstance.PrivateIp}
                Branch: ${Branch}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_cf_worker.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/khulnasoft/cluster/khulnasoft_cf_worker.sh
              mode: '000700'
              owner: root
              group: root
        KhulnasoftInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_cf_worker.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref KhulnasoftInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref KhulnasoftWorkerEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: KhulnasoftWorker
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource KhulnasoftWorkerInstance --configsets KhulnasoftInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KhulnasoftWorkerInstance --region ${AWS::Region}
    DependsOn: GatewayToInternet
  KhulnasoftWorkerEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetKhulnasoft
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  KhulnasoftWorkerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'WorkerEIP-${AWS::StackName}'
  KhulnasoftWorkerEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref KhulnasoftWorkerEth0
      AllocationId: !GetAtt
        - KhulnasoftWorkerEIP
        - AllocationId

  # Amazon Linux agent instance and networking requirements
  Amazon:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          AmazonInstallationSet:
            - KhulnasoftFiles
            - KhulnasoftInstall
        KhulnasoftFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KhulnasoftServerPort: ${KhulnasoftServerPort}
                KhulnasoftRegistrationPort: ${KhulnasoftRegistrationPort}
                KhulnasoftRegistrationPassword: ${KhulnasoftRegistrationPassword}
                KhulnasoftMasterIP: ${KhulnasoftMasterInstance.PrivateIp}
                ElbKhulnasoftDNS: ${KhulnasoftNetworkLoadBalancer.DNSName}
                AgentName: Amazon
                EnvironmentType: ${EnvironmentType}
                Branch: ${Branch}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_agent_amazon.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/khulnasoft/agents/khulnasoft_agent_amazon.sh
              mode: '000700'
              owner: root
              group: root
        KhulnasoftInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_agent_amazon.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVM64
      InstanceType: !Ref AgentInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref AmazonEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: Amazon
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource Amazon --configsets AmazonInstallationSet --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Amazon --region ${AWS::Region}
    DependsOn: GatewayToInternet
  AmazonEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetAgents
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  AmazonEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'AmazonEIP-${AWS::StackName}'
  AmazonEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref AmazonEth0
      AllocationId: !GetAtt
        - AmazonEIP
        - AllocationId

  # CentOS agent instance and networking requirements
  Centos:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          CentosInstallationSet:
            - KhulnasoftFiles
            - KhulnasoftInstall
        KhulnasoftFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KhulnasoftServerPort: ${KhulnasoftServerPort}
                KhulnasoftRegistrationPort: ${KhulnasoftRegistrationPort}
                KhulnasoftRegistrationPassword: ${KhulnasoftRegistrationPassword}
                KhulnasoftMasterIP: ${KhulnasoftMasterInstance.PrivateIp}
                ElbKhulnasoftDNS: ${KhulnasoftNetworkLoadBalancer.DNSName}
                AgentName: Centos
                EnvironmentType: ${EnvironmentType}
                Branch: ${Branch}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_agent_centos.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/khulnasoft/agents/khulnasoft_agent_centos.sh
              mode: '000700'
              owner: root
              group: root
        KhulnasoftInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_agent_centos.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVMCENTOS7
      InstanceType: !Ref CentosAgentInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref CentosEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: Centos
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo 'Starting...' > /tmp/cflog.log
          yum -y --enablerepo=extras install epel-release
          yum install python-daemon pystache -y
          yum install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm -y
          yum -y update
          sleep 10
          cp /usr/local/lib/python2.7/site-packages/cfnbootstrap/ /usr/lib/python2.7/site-packages/ -R
          echo 'Copied' > /tmp/checkpoint.log
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource Centos --configsets CentosInstallationSet --region ${AWS::Region} 2> /tmp/cfnerror.log
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Centos --region ${AWS::Region} 2> /tmp/cfnerror.log
          echo 'Exiting...' >> /tmp/cflog.log
    DependsOn: GatewayToInternet
  CentosEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetAgents
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  CentosEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'CentosEIP-${AWS::StackName}'
  CentosEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref CentosEth0
      AllocationId: !GetAtt
        - CentosEIP
        - AllocationId

  # Windows agent instance and networking requirements
  Windows:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVMWINDOWS
      InstanceType: !Ref WindowsInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WindowsEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: Windows
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          $Password = (convertto-securestring -asplaintext ${SshPassword} -force)
          New-LocalUser "khulnasoft" -Password $Password -FullName "khulnasoft" -Description "Khulnasoft user for remote desktop"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "khulnasoft"
          net user Administrator ${SshPassword}
          $master_ip=${KhulnasoftNetworkLoadBalancer.DNSName}
          $url = "https://packages.khulnasoft.com/3.x/windows/khulnasoft-agent-${Winagentversion}-1.msi"
          $path = "C:\\Users\\Administrator\\Desktop\\khulnasoft-agent.msi"
          $url_osquery = "https://pkg.osquery.io/windows/osquery-3.3.2.msi"
          $path_osquery = "C:\\Users\\Administrator\\Desktop\\osquery.msi"
          if(!(Split-Path -parent $path) -or !(Test-Path -pathType Container (Split-Path -parent $path))) {
            $targetFile = Join-Path $pwd (Split-Path -leaf $path)
          }
          try {
            $LocalTempDir = $env:TEMP; $ChromeInstaller = "ChromeInstaller.exe"; (new-object    System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/375.126/chrome_installer.exe', "$LocalTempDir\$ChromeInstaller"); & "$LocalTempDir\$ChromeInstaller" /silent /install; $Process2Monitor =  "ChromeInstaller"; Do { $ProcessesFound = Get-Process | ?{$Process2Monitor -contains $_.Name} | Select-Object -ExpandProperty Name; If ($ProcessesFound) { "Still running: $($ProcessesFound -join ', ')" | Write-Host; Start-Sleep -Seconds 2 } else { rm "$LocalTempDir\$ChromeInstaller" -ErrorAction SilentlyContinue -Verbose } } Until (!$ProcessesFound)
          } catch {
            $_.Exception.Message
            "Error installing Google Chrome."
          }
          (New-Object Net.WebClient).DownloadFile($url, $path)
          (New-Object Net.WebClient).DownloadFile($url_osquery, $path_osquery)
          New-Item -ItemType directory -Path C:\Santiago
          Start-Sleep -s 400
          try {
            Start-Process -FilePath "C:\\Users\\Administrator\\Desktop\\khulnasoft-agent.msi" -Wait -ArgumentList /q,ADDRESS=${KhulnasoftNetworkLoadBalancer.DNSName},AUTHD_SERVER=${KhulnasoftNetworkLoadBalancer.DNSName},AGENT_NAME="Windows",PROTOCOL="TCP",PASSWORD=${KhulnasoftRegistrationPassword}
          } catch {
            $_.Exception.Message
            "Error installing Khulnasoft agent"
            Exit
          }
          try {
            Start-Process -FilePath "C:\\Users\\Administrator\\Desktop\\osquery.msi" -Wait
          } catch {
            $_.Exception.Message
            "Error installing Osquery"
            Exit
          }
          </powershell>
    DependsOn: GatewayToInternet
  WindowsEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetAgents
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  WindowsEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'WindowsEIP-${AWS::StackName}'
  WindowsEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref WindowsEth0
      AllocationId: !GetAtt
        - WindowsEIP
        - AllocationId

  # Debian agent instance and networking requirements
  Debian:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          DebianInstallationSet:
            - KhulnasoftFiles
            - KhulnasoftInstall
        KhulnasoftFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KhulnasoftServerPort: ${KhulnasoftServerPort}
                KhulnasoftRegistrationPort: ${KhulnasoftRegistrationPort}
                KhulnasoftRegistrationPassword: ${KhulnasoftRegistrationPassword}
                KhulnasoftMasterIP: ${KhulnasoftMasterInstance.PrivateIp}
                ElbKhulnasoftDNS: ${KhulnasoftNetworkLoadBalancer.DNSName}
                AgentName: Debian
                EnvironmentType: ${EnvironmentType}
                Branch: ${Branch}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_agent_debian.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/khulnasoft/agents/khulnasoft_cf_agent_debian.sh
              mode: '000700'
              owner: root
              group: root
        KhulnasoftInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_agent_debian.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVMDEBIAN
      InstanceType: !Ref DebianInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref DebianEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: Debian
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo 'Starting...' > /tmp/cflog.log
          # the current sources seems to be down, so we gotta change them as a workaround
          rm -rf /etc/apt/sources.list
          echo 'deb http://deb.debian.org/debian jessie main' > /etc/apt/sources.list
          echo 'deb-src http://deb.debian.org/debian jessie main' >> /etc/apt/sources.list
          apt update
          apt-get -y install python-setuptools curl
          mkdir aws-cfn-bootstrap-latest
          curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
          easy_install aws-cfn-bootstrap-latest
          echo 'Copied' > /tmp/checkpoint.log
          /usr/local/bin/cfn-init --stack ${AWS::StackName} --resource Debian --configsets DebianInstallationSet --region ${AWS::Region} 2> /tmp/cfnerror.log
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Debian --region ${AWS::Region} 2> /tmp/cfnerror.log
          echo 'Exiting...' >> /tmp/cflog.log
    DependsOn: GatewayToInternet
  DebianEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetAgents
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  DebianEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'DebianEIP-${AWS::StackName}'
  DebianEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref DebianEth0
      AllocationId: !GetAtt
        - DebianEIP
        - AllocationId

  # Ubuntu agent instance and networking requirements
  Ubuntu:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          UbuntuInstallationSet:
            - KhulnasoftFiles
            - KhulnasoftInstall
        KhulnasoftFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KhulnasoftServerPort: ${KhulnasoftServerPort}
                KhulnasoftRegistrationPort: ${KhulnasoftRegistrationPort}
                KhulnasoftRegistrationPassword: ${KhulnasoftRegistrationPassword}
                KhulnasoftMasterIP: ${KhulnasoftMasterInstance.PrivateIp}
                ElbKhulnasoftDNS: ${KhulnasoftNetworkLoadBalancer.DNSName}
                AgentName: Ubuntu
                EnvironmentType: ${EnvironmentType}
                Branch: ${Branch}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_agent_ubuntu.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/khulnasoft/agents/khulnasoft_cf_agent_ubuntu.sh
              mode: '000700'
              owner: root
              group: root
        KhulnasoftInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_agent_ubuntu.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVMUBUNTU64
      InstanceType: !Ref UbuntuInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref UbuntuEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: Ubuntu
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND=noninteractive
          echo 'Starting...' > /tmp/cflog.log
          apt update
          apt-get -y install python-setuptools curl python-pip
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          echo 'Copied' > /tmp/checkpoint.log
          /usr/local/bin/cfn-init --stack ${AWS::StackName} --resource Ubuntu --configsets UbuntuInstallationSet --region ${AWS::Region} 2> /tmp/cfnerror.log
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ubuntu --region ${AWS::Region} 2> /tmp/cfnerror.log
          echo 'Exiting...' >> /tmp/cflog.log
    DependsOn: GatewayToInternet
  UbuntuEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetAgents
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  UbuntuEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'UbuntuEIP-${AWS::StackName}'
  UbuntuEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref UbuntuEth0
      AllocationId: !GetAtt
        - UbuntuEIP
        - AllocationId

  # RHEL7 agent instance and networking requirements
  RHEL7:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          RHEL7InstallationSet:
            - KhulnasoftFiles
            - KhulnasoftInstall
        KhulnasoftFiles:
          files:
            /tmp/khulnasoft_cf_settings:
              content: !Sub |
                SshUsername: ${SshUsername}
                SshPassword: ${SshPassword}
                Elastic_Khulnasoft: ${ElasticKhulnasoftVersion}
                KhulnasoftServerPort: ${KhulnasoftServerPort}
                KhulnasoftRegistrationPort: ${KhulnasoftRegistrationPort}
                KhulnasoftRegistrationPassword: ${KhulnasoftRegistrationPassword}
                KhulnasoftMasterIP: ${KhulnasoftMasterInstance.PrivateIp}
                ElbKhulnasoftDNS: ${KhulnasoftNetworkLoadBalancer.DNSName}
                AgentName: RHEL7
                EnvironmentType: ${EnvironmentType}
                Branch: ${Branch}
              mode: '000600'
              owner: root
              group: root
            /tmp/khulnasoft_agent_rhel.sh:
              source: !Sub >-
                https://raw.githubusercontent.com/khulnasoft/khulnasoft-cloudformation/master/demo/khulnasoft/agents/khulnasoft_agent_rhel.sh
              mode: '000700'
              owner: root
              group: root
        KhulnasoftInstall:
          commands:
            01_RunInstallationScript:
              command: /tmp/khulnasoft_agent_rhel.sh
    Properties:
      ImageId: !FindInMap
        - "RegionMap"
        - Ref: "AWS::Region"
        - HVMREDHAT7
      InstanceType: !Ref RedHatInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref RHELEth0
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: RHEL7
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo 'Starting...' > /tmp/cflog.log
          ### This is redhat 7. It supports cloud-init but Cfn packages need to be installed unlike AWS Linux. And they are installed in a different location\n,
          # First enable EPEL\n,
          rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          # Now install Python Setuptools(easy_install) and Pip
          yum -y install python-pip
          # Now install cfn scripts
          /bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource RHEL7 --configsets RHEL7InstallationSet --region ${AWS::Region} 2> /tmp/cfnerror.log
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource RHEL7 --region ${AWS::Region} 2> /tmp/cfnerror.log
          echo 'Exiting...' >> /tmp/cflog.log
    DependsOn: GatewayToInternet
  RHELEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetAgents
      GroupSet: [!Ref 'KhulnasoftSecurityGroup']
  RHELEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'RhelEIP-${AWS::StackName}'
  RHELEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref RHELEth0
      AllocationId: !GetAtt
        - RHELEIP
        - AllocationId

Outputs:
  ElasticBootstrapIp:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - ElasticBootstrap
      - PublicIp
  ElasticMasterB:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - ElasticMasterB
      - PublicIp
  ElasticMasterC:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - ElasticMasterC
      - PublicIp
  KhulnasoftMasterInstance:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - KhulnasoftMasterInstance
      - PublicIp
  KhulnasoftWorkerInstance:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - KhulnasoftWorkerInstance
      - PublicIp
  KibanaInstance:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - KibanaInstance
      - PublicIp
  Amazon:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - Amazon
      - PublicIp
  Centos:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - Centos
      - PublicIp
  Debian:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - Debian
      - PublicIp
  Ubuntu:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - Ubuntu
      - PublicIp
  Windows:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - Windows
      - PublicIp
  RHEL7:
    Description: Elastic Stack and Khulnasoft versions
    Value: !GetAtt
      - RHEL7
      - PublicIp
